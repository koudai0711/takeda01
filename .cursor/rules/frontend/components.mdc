# コンポーネント設計ルール

*このファイル: /.cursor/rules/frontend/components.mdc*

## コンポーネント基本設計

- 単一責任の原則に従う
- 再利用可能なコンポーネントを優先
- Props と Emits を明示的に型定義
- 内部状態は最小限に保つ

## コンポーネントの種類

### UIコンポーネント

基本的なUI要素を提供する小さなコンポーネント：

```
Components/UI/
├── Button.vue           # ボタンコンポーネント
├── Alert.vue            # アラートメッセージ
├── Badge.vue            # バッジ表示
├── Card.vue             # カードレイアウト
├── Input.vue            # 入力フィールド
├── Select.vue           # セレクトボックス
├── Modal.vue            # モーダルダイアログ
└── ...
```

### フォームコンポーネント

フォーム関連の複合コンポーネント：

```
Components/Forms/
├── BaseForm.vue         # フォーム基本コンポーネント
├── FormGroup.vue        # フォームグループ
├── SearchForm.vue       # 検索フォーム
├── ProductForm.vue      # 商品入力フォーム
├── InventoryForm.vue    # 在庫入力フォーム
└── ...
```

### データ表示コンポーネント

データを表形式で表示するコンポーネント：

```
Components/Tables/
├── BaseTable.vue        # テーブル基本コンポーネント
├── SortableTable.vue    # ソート可能テーブル
├── ProductTable.vue     # 商品一覧テーブル
├── InventoryTable.vue   # 在庫一覧テーブル
└── ...
```

### レイアウトコンポーネント

ページレイアウトを構成するコンポーネント：

```
Components/Layout/
├── MainLayout.vue       # メインレイアウト
├── Navbar.vue           # ナビゲーションバー
├── Sidebar.vue          # サイドバー
├── Footer.vue           # フッター
└── ...
```

## 実装例

### UI コンポーネント例

```vue
<!-- Components/UI/Button.vue -->
<script setup lang="ts">
defineProps<{
  type?: 'button' | 'submit' | 'reset';
  variant?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
}>();

defineEmits<{
  (e: 'click', event: MouseEvent): void;
}>();

const variantClasses = {
  primary: 'bg-blue-600 hover:bg-blue-700 text-white',
  secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-900',
  danger: 'bg-red-600 hover:bg-red-700 text-white',
  success: 'bg-green-600 hover:bg-green-700 text-white',
  warning: 'bg-yellow-500 hover:bg-yellow-600 text-white',
};

const sizeClasses = {
  sm: 'py-1 px-2 text-sm',
  md: 'py-2 px-4 text-base',
  lg: 'py-3 px-6 text-lg',
};
</script>

<template>
  <button
    :type="type || 'button'"
    :disabled="disabled || loading"
    :class="[
      'rounded font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2',
      variantClasses[variant || 'primary'],
      sizeClasses[size || 'md'],
      disabled ? 'opacity-50 cursor-not-allowed' : '',
    ]"
    @click="$emit('click', $event)"
  >
    <span v-if="loading" class="inline-block mr-2">
      <!-- ローディングアイコン -->
      <svg class="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </span>
    <slot></slot>
  </button>
</template>
```

### フォームコンポーネント例

```vue
<!-- Components/Forms/SearchForm.vue -->
<script setup lang="ts">
import { ref, watch } from 'vue';
import Button from '@/Components/UI/Button.vue';
import Input from '@/Components/UI/Input.vue';

const props = defineProps<{
  initialQuery?: string;
  loading?: boolean;
}>();

const emit = defineEmits<{
  (e: 'search', query: string): void;
}>();

const searchQuery = ref(props.initialQuery || '');

// 入力値が変更されたら親コンポーネントに通知
watch(searchQuery, (newValue) => {
  emit('search', newValue);
});

const handleSubmit = () => {
  emit('search', searchQuery.value);
};
</script>

<template>
  <form @submit.prevent="handleSubmit" class="flex space-x-2">
    <Input
      v-model="searchQuery"
      placeholder="検索キーワードを入力..."
      class="flex-grow"
      :disabled="loading"
    />
    <Button type="submit" :loading="loading">
      検索
    </Button>
  </form>
</template>
```

### データテーブル例

```vue
<!-- Components/Tables/ProductTable.vue -->
<script setup lang="ts">
import { computed } from 'vue';
import { Link } from '@inertiajs/vue3';
import Badge from '@/Components/UI/Badge.vue';
import Button from '@/Components/UI/Button.vue';
import { Product } from '@/Types/product';

const props = defineProps<{
  products: Product[];
  loading?: boolean;
}>();

const formatPrice = (price: number): string => {
  return new Intl.NumberFormat('ja-JP', {
    style: 'currency',
    currency: 'JPY'
  }).format(price);
};
</script>

<template>
  <div class="overflow-x-auto bg-white shadow rounded-lg">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">商品コード</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">商品名</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">価格</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">カテゴリ</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ステータス</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        <template v-if="loading">
          <tr v-for="i in 5" :key="i">
            <td colspan="6" class="px-6 py-4">
              <div class="animate-pulse h-4 bg-gray-200 rounded w-3/4"></div>
            </td>
          </tr>
        </template>
        <template v-else-if="products.length">
          <tr v-for="product in products" :key="product.id">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
              {{ product.product_code }}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              {{ product.name }}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              {{ formatPrice(product.price) }}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              {{ product.category?.name || '未分類' }}
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <Badge :variant="product.is_active ? 'success' : 'warning'">
                {{ product.is_active ? '有効' : '無効' }}
              </Badge>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
              <Link :href="`/products/${product.id}`" class="text-blue-600 hover:text-blue-900 mr-3">詳細</Link>
              <Link :href="`/products/${product.id}/edit`" class="text-indigo-600 hover:text-indigo-900">編集</Link>
            </td>
          </tr>
        </template>
        <template v-else>
          <tr>
            <td colspan="6" class="px-6 py-4 text-center text-sm text-gray-500">
              商品が見つかりませんでした
            </td>
          </tr>
        </template>
      </tbody>
    </table>
  </div>
</template>
```

## コンポーネント設計原則

1. **再利用性**: 特定のドメインロジックを含めず、再利用しやすいようにする
2. **テスト可能性**: 単純な入出力関係を持つようにして、テストしやすくする
3. **コンポジション**: 小さなコンポーネントを組み合わせて複雑なUIを構築
4. **明示的なAPI**: Props と Emits を明確に定義し、ドキュメントコメントを追加
5. **適切な粒度**: 一つのコンポーネントで多すぎる責務を持たせない

## 使用例

このルールファイルを使用する場合：

```
# components.mdcを使用しています
# コンポーネント設計ルールに従い、次のようにButtonコンポーネントを実装します...
``` 